df.j$hours_sleep[df.j$hours_sleep == "8"] <- "7-8"
# Filling empty values for circle_below and circle_above as NAs
df.j$circle_below[df.j$circle_below == ""] <- NA
df.j$circle_above[df.j$circle_above == ""] <- NA
# Recoding srm, geovis_3d_exposure and satellite_exposure variables
df.j$srm[df.j$srm == "never"] <- 1
df.j$srm[df.j$srm == "rarely"] <- 2
df.j$srm[df.j$srm == "occassionally"] <- 3
df.j$srm[df.j$srm == "often"] <- 4
df.j$srm[df.j$srm == "daily"] <- 5
# srm
df.j$geovis_3d_exposure[df.j$geovis_3d_exposure == "never"] <- 1
df.j$geovis_3d_exposure[df.j$geovis_3d_exposure == "rarely"] <- 2
df.j$geovis_3d_exposure[df.j$geovis_3d_exposure == "occassionally"] <- 3
df.j$geovis_3d_exposure[df.j$geovis_3d_exposure == "often"] <- 4
df.j$geovis_3d_exposure[df.j$geovis_3d_exposure == "daily"] <- 5
# geovis_3d_exposure
df.j$satellite_exposure[df.j$satellite_exposure == "never"] <- 1
df.j$satellite_exposure[df.j$satellite_exposure == "rarely"] <- 2
df.j$satellite_exposure[df.j$satellite_exposure == "occassionally"] <- 3
df.j$satellite_exposure[df.j$satellite_exposure == "often"] <- 4
df.j$satellite_exposure[df.j$satellite_exposure == "daily"] <- 5
# satellite_exposure
# Adding an expertise var based on srm
df.j$expertise[df.j$srm <= 2] <- "no_experience"
df.j$expertise[df.j$srm >= 2 & df.j$srm <= 4] <- "some_experience"
# Reordering variables
df.j <- df.j %>%
select(1:12, expertise, 13:20, mask, circle_below, circle_above,24:73)
# Deleting useless column
df.g$haendigkeit <- NULL
# Renaming variables names
df.g <- df.g %>%
rename("age_group" = "alter",
"education" = "ausbildung",
"hours_sleep" = "schlaf",
"color_blindness" = "farbenblindheit",
"photo_exposure" = "fotos",
"carto_gis_exposure" = "kartographie",
"geovis_3d_exposure" = "drei_d_geovis",
"satellite_exposure" = "satellitenbilder",
"mask" = "maske")
# Adding new variables
df.g <- transform(df.g,
art_light_r_w = NA,
light_dir_r_s = NA,
photo_training = NA,
carto_gis_training = NA,
geovis_3d_training = NA,
satellite_training = NA,
expertise = NA,
circle_below = NA,
circle_above = NA,
shapes_01 = NA,
shapes_02 = NA,
shapes_03 = NA,
shapes_04 = NA,
shapes_05 = NA,
shapes_06 = NA,
shapes_07 = NA,
shapes_08 = NA,
shapes_09 = NA,
shapes_10 = NA,
srm = NA)
# Recoding education variable
df.g$education[df.g$education == "University: Bachelor degree or equivalent"] <- "bachelor"
df.g$education[df.g$education == "University of applied sciences"] <- "bachelor" # assumption!
df.g$education[df.g$education == "University: Master degree or equivalent"] <- "master"
df.g$education[df.g$education == "University: Doctoral degree"] <- "doctoral"
df.g$education[df.g$education == "Apprenticeship high school"] <- "high_school"
df.g$education[df.g$education == "Academic high school"] <- "high_school"
# Regrouping age_group category
df.g$age_group[df.g$age_group == "18-29" & df.g$education == "bachelor" | df.g$education == "master"] <- "20-29"
df.g$age_group[df.g$age_group == "18-29" & df.g$education == "high_school"] <- "10-19"
# Regrouping hours_sleep bottom and top categories
df.g$hours_sleep[df.g$hours_sleep == "<3"] <- "less_than_3"
df.g$hours_sleep[df.g$hours_sleep == ">8"] <- "more_than_8"
df.g$hours_sleep[df.g$hours_sleep == "3"] <- "3-4"
df.g$hours_sleep[df.g$hours_sleep == "4"] <- "4-5"
df.g$hours_sleep[df.g$hours_sleep == "5"] <- "5-6"
df.g$hours_sleep[df.g$hours_sleep == "6"] <- "6-7"
df.g$hours_sleep[df.g$hours_sleep == "7"] <- "7-8"
df.g$hours_sleep[df.g$hours_sleep == "8"] <- "7-8"
# Values to lowercase
df.g[, 10:14] <- apply(df.g[, 10:14], 2, tolower)
df.g$color_blindness <- unlist(lapply(df.g$color_blindness, tolower))
# Recoding _exposure variables
df.g$photo_exposure[df.g$photo_exposure == "never"] <- 1
df.g$photo_exposure[df.g$photo_exposure == "rarely"] <- 2
df.g$photo_exposure[df.g$photo_exposure == "occasionally"] <- 3
df.g$photo_exposure[df.g$photo_exposure == "often"] <- 4
df.g$photo_exposure[df.g$photo_exposure == "daily"] <- 5
# photo_exposure
df.g$carto_gis_exposure[df.g$carto_gis_exposure == "never"] <- 1
df.g$carto_gis_exposure[df.g$carto_gis_exposure == "rarely"] <- 2
df.g$carto_gis_exposure[df.g$carto_gis_exposure == "occasionally"] <- 3
df.g$carto_gis_exposure[df.g$carto_gis_exposure == "often"] <- 4
df.g$carto_gis_exposure[df.g$carto_gis_exposure == "daily"] <- 5
# carto_gis_exposure
df.g$geovis_3d_exposure[df.g$geovis_3d_exposure == "never"] <- 1
df.g$geovis_3d_exposure[df.g$geovis_3d_exposure == "rarely"] <- 2
df.g$geovis_3d_exposure[df.g$geovis_3d_exposure == "occasionally"] <- 3
df.g$geovis_3d_exposure[df.g$geovis_3d_exposure == "often"] <- 4
df.g$geovis_3d_exposure[df.g$geovis_3d_exposure == "daily"] <- 5
# geovis_3d_exposure
df.g$satellite_exposure[df.g$satellite_exposure == "never"] <- 1
df.g$satellite_exposure[df.g$satellite_exposure == "rarely"] <- 2
df.g$satellite_exposure[df.g$satellite_exposure == "occasionally"] <- 3
df.g$satellite_exposure[df.g$satellite_exposure == "often"] <- 4
df.g$satellite_exposure[df.g$satellite_exposure == "daily"] <- 5
# satellite_exposure
# Converting new values to integer
df.g$photo_exposure <- as.integer(df.g$photo_exposure)
df.g$carto_gis_exposure <- as.integer(df.g$carto_gis_exposure)
df.g$geovis_3d_exposure <- as.integer(df.g$geovis_3d_exposure)
df.g$satellite_exposure <- as.integer(df.g$satellite_exposure)
# Adding an expertise var based on maps and/or satellite exposure
df.g$expertise[df.g$carto_gis_exposure <= 3 | df.g$geovis_3d_exposure <= 3 | df.g$satellite_exposure <= 3] <- "no_experience"
df.g$expertise[df.g$carto_gis_exposure > 3 | df.g$geovis_3d_exposure > 3 | df.g$satellite_exposure > 3] <- "some_experience"
# Reordering variables
df.g <- df.g[, names(df.j)]
# Adding variables
df.v$hemisphere <- "southern"
df.v$srm <- "NA"
df.v$expertise <- "NA"
# Regrouping age_group category
df.v$age_group[df.v$age_group <= "29"] <- "20-29"
# Splitting character vector from hours_sleep
df.v$hours_sleep <- unlist(strsplit(df.v$hours_sleep, " hours"))
# Recoding education variable
df.v$education <- "bachelor"
# Values to lowercase
df.v$light_dir_r_s <- unlist(lapply(df.v$light_dir_r_s, tolower))
# Filling empty values for exposure variables
df.v$photo_exposure <- ifelse(df.v$photo_exposure == " ", NA, df.v$satellite_exposure)
df.v$carto_gis_exposure <- ifelse(df.v$carto_gis_exposure == " ", NA, df.v$carto_gis_exposure)
df.v$geovis_3d_exposure <- ifelse(df.v$geovis_3d_exposure == " ", NA, df.v$geovis_3d_exposure)
df.v$satellite_exposure <- ifelse(df.v$satellite_exposure == " ", NA, df.v$satellite_exposure)
# Recoding _exposure variables
df.v$photo_exposure[df.v$photo_exposure == "never"] <- 1
df.v$photo_exposure[df.v$photo_exposure == "daily"] <- 5
# photo_exposure
df.v$carto_gis_exposure[df.v$carto_gis_exposure == "never"] <- 1
df.v$carto_gis_exposure[df.v$carto_gis_exposure == "daily"] <- 5
# carto_gis_exposure
df.v$geovis_3d_exposure[df.v$geovis_3d_exposure == "never"] <- 1
df.v$geovis_3d_exposure[df.v$geovis_3d_exposure == "daily"] <- 5
# geovis_3d_exposure
df.v$satellite_exposure[df.v$satellite_exposure == "never"] <- 1
df.v$satellite_exposure[df.v$satellite_exposure == "daily"] <- 5
# satellite_exposure
# Converting new values to integer
df.v$photo_exposure <- as.integer(df.v$photo_exposure)
df.v$carto_gis_exposure <- as.integer(df.v$carto_gis_exposure)
df.v$geovis_3d_exposure <- as.integer(df.v$geovis_3d_exposure)
df.v$satellite_exposure <- as.integer(df.v$satellite_exposure)
# Calculating the expertise mean for every participant
df.v$expertise_mean <- rowSums(df.v[, 14:21], na.rm = TRUE) / 4
# Adding an expertise var based the expertise mean
df.v$expertise[df.v$expertise_mean < 4] <- "no_experience"
df.v$expertise[df.v$expertise_mean >= 4] <- "some_experience"
# Reordering variables
df.v <- df.v[, names(df.j)]
# Adding hemisphere variable
df.a$hemisphere <- "southern"
df.a$srm <- "NA"
df.a$expertise <- "NA"
# Regrouping age_group category
df.a$age_group[df.a$age_group <= "19"] <- "10-19"
df.a$age_group[df.a$age_group <= "29" & df.a$age_group >= 20] <- "20-29"
df.a$age_group[df.a$age_group <= "39" & df.a$age_group >= 30] <- "30-39"
df.a$age_group[df.a$age_group <= "49" & df.a$age_group >= 40] <- "40-49"
df.a$age_group[df.a$age_group <= "59" & df.a$age_group >= 50] <- "50-59"
df.a$age_group[df.a$age_group <= "69" & df.a$age_group >= 60] <- "60-69"
# Recoding education variable
df.a$education[df.a$education == "Currently registered at University/College for Bachelor degree or equivalent"] <- "bachelor"
df.a$education[df.a$education == "University/College: Bachelor degree or equivalent"] <- "bachelor"
df.a$education[df.a$education == "University/College: Honours, Masters, PhD degree or equivalent"] <- "master"
df.a$education[df.a$education == "High school diploma or equivalent ( e.g. NCS or matric )"] <- "high_school"
# Recoding hours_sleep
df.a$hours_sleep <- unlist(strsplit(df.a$hours_sleep, " hours")) # splitting characters
df.a$hours_sleep <- unlist(lapply(df.a$hours_sleep, tolower)) # values to lowercase
df.a$hours_sleep[df.a$hours_sleep == "more than 8"] <- "more_than_8" # recoding
# Values to lowercase
df.a$art_light_r_w <- unlist(lapply(df.a$art_light_r_w, tolower))
df.a$light_dir_r_s <- unlist(lapply(df.a$light_dir_r_s, tolower))
df.a$color_blindness <- unlist(lapply(df.a$color_blindness, tolower))
# Filling empty values for exposure variables
df.a$photo_exposure <- ifelse(df.a$photo_exposure == " ", NA, df.a$satellite_exposure)
df.a$carto_gis_exposure <- ifelse(df.a$carto_gis_exposure == " ", NA, df.a$carto_gis_exposure)
df.a$geovis_3d_exposure <- ifelse(df.a$geovis_3d_exposure == " ", NA, df.a$geovis_3d_exposure)
df.a$satellite_exposure <- ifelse(df.a$satellite_exposure == " ", NA, df.a$satellite_exposure)
# Recoding _exposure variables
df.a$photo_exposure[df.a$photo_exposure == "never"] <- 1
df.a$photo_exposure[df.a$photo_exposure == "daily"] <- 5
# photo_exposure
df.a$carto_gis_exposure[df.a$carto_gis_exposure == "never"] <- 1
df.a$carto_gis_exposure[df.a$carto_gis_exposure == "daily"] <- 5
# carto_gis_exposure
df.a$geovis_3d_exposure[df.a$geovis_3d_exposure == "never"] <- 1
df.a$geovis_3d_exposure[df.a$geovis_3d_exposure == "daily"] <- 5
# geovis_3d_exposure
df.a$satellite_exposure[df.a$satellite_exposure == "never"] <- 1
df.a$satellite_exposure[df.a$satellite_exposure == "daily"] <- 5
# satellite_exposure
# Converting new values to integer
df.a$photo_exposure <- as.integer(df.a$photo_exposure)
df.a$carto_gis_exposure <- as.integer(df.a$carto_gis_exposure)
df.a$geovis_3d_exposure <- as.integer(df.a$geovis_3d_exposure)
df.a$satellite_exposure <- as.integer(df.a$satellite_exposure)
# Calculating the expertise mean for every participant
df.a$expertise_mean <- rowSums(df.a[, 14:21], na.rm = TRUE) / 4
# Adding an expertise var based on the expertise mean
df.a$expertise[df.a$expertise_mean < 4] <- "no_experience"
df.a$expertise[df.a$expertise_mean >= 4] <- "some_experience"
# Reordering variables
df.a <- df.a[, names(df.j)]
# Creating a all-in-one wide df
df_wide <- rbind(df.j, df.g, df.v, df.a)
# Converting numeric vars to factor
cols <- c(35:74)
df_wide[, cols] <- lapply(df_wide[, cols] , factor)
# Reshaping from wide to long
df_long <- df_wide %>% pivot_longer(
cols = q10_r000_0:q80_v135_337.5,
names_to = c("landform", "land_dir", "light_dir"),
names_pattern = "q?_(.)(.*)_(.*?..*)",
values_to = "respond")
# Setting accuracy
ridge_t <- df_long$landform == "r" & (df_long$respond == "4" | df_long$respond == "5")
ridge_f <- df_long$landform == "r" & (df_long$respond == "1" | df_long$respond == "2")
valley_t <- df_long$landform == "v" & (df_long$respond == "1" | df_long$respond == "2")
valley_f <- df_long$landform == "v" & (df_long$respond == "4" | df_long$respond == "5")
df_long$accuracy <- ifelse(ridge_t | valley_t , "yes", "no")
# Setting confidence
df_long$confidence <- "NA"
df_long$confidence[df_long$respond == "1" | df_long$respond == "5"] <- "high_confidence"
df_long$confidence[df_long$respond == "2" | df_long$respond == "4"] <- "low_confidence"
df_long$confidence[df_long$respond == "3"] <- "ambiguous"
# Calculating accuracy per participant
accu_part <- df_long %>%
filter(accuracy == "yes") %>%
group_by(ds_owner, id) %>%
mutate(accu_count = n(),
accu_pct = round(accu_count / 40 * 100, 1)) %>%
ungroup() %>%
select(ds_owner, id, accu_count, accu_pct)
# Looking for outliers
p <- ggplot(accu_part, aes(x = ds_owner, y = accu_pct))
p + geom_boxplot(fill = "#85CFE6") +
scale_y_continuous(labels = scales::label_percent(scale = 1)) +
labs(x = "Data Set Owner", y = "Accuracy (%)",
title = "Spotting Outliers for Accuracy")
outlierSummary(accu_part$accu_pct)
# Assessing outliers
accu_part_outliers <- accu_part %>%
mutate(zscore = (accu_pct - mean(accu_pct)) / sd(accu_pct),
outlier = ifelse(zscore > 2.58 | zscore < -2.58, "yes", "no")) %>%
filter(outlier == "yes") %>%
group_by(ds_owner, id) %>%
summarise()
# Getting rid of outliers
outliers <- c(16, 11, 12, 2, 6, 32, 60, 73, 77, 80)
df_long_clean <- df_long %>%
filter(!(!ds_owner == "j" & id == outliers))
# Calculating accuracy per respond
accu_resp_j <- df_long_clean %>%
filter(accuracy == "yes",
ds_owner == "j") %>%
group_by(ds_owner, landform, land_dir, light_dir) %>%
summarise(accu_count = n()) %>%
mutate(accu_pct = accu_count / 27 * 100)
accu_resp_g <- df_long_clean %>%
filter(accuracy == "yes",
ds_owner == "g") %>%
group_by(ds_owner, landform, land_dir, light_dir) %>%
summarise(accu_count = n()) %>%
mutate(accu_pct = accu_count / 35 * 100)
accu_resp_v <- df_long_clean %>%
filter(accuracy == "yes",
ds_owner == "v") %>%
group_by(ds_owner, landform, land_dir, light_dir) %>%
summarise(accu_count = n()) %>%
mutate(accu_pct = accu_count / 87 * 100)
accu_resp_a <- df_long_clean %>%
filter(accuracy == "yes",
ds_owner == "a") %>%
group_by(ds_owner, landform, land_dir, light_dir) %>%
summarise(accu_count = n()) %>%
mutate(accu_pct = accu_count / 41 * 100)
accu_resp <- rbind(accu_resp_j, accu_resp_g, accu_resp_v, accu_resp_a)
# Calculating accuracy mean per light direction
accu_resp_north <- accu_resp %>%
group_by(ds_owner, light_dir) %>%
summarise(mean = mean(accu_pct))
accu_resp_north <- within(accu_resp_north, ds_owner <- factor(ds_owner, levels = c("j", "g", "v", "a")))
accu_resp_north <- within(accu_resp_north, light_dir <- factor(light_dir, levels = c(0, 337.5, 315, 292.5, 270)))
p <- ggplot(accu_resp_north, aes(x = light_dir, y = mean, fill = light_dir, label = mean))
p + geom_bar(stat = "identity", alpha = .9) +
scale_fill_brewer(type = "qual", palette = "Dark2") +
scale_y_continuous(labels = scales::label_percent(scale = 1),
expand = expansion(mult = c(0, 0.05))) +
labs(x = NULL, y = "Mean",
fill = "Light Direction",
title = "Mean accuracy per data set owner (NW)") +
geom_text(aes(y = mean, label = round(mean, digits = 1)), position = position_dodge2(width = 1), vjust = 2, size = rel(3), family = dviz_font_family) +
facet_wrap(~ ds_owner) +
theme_dviz_hgrid() +
theme(
legend.position = "NULL",
strip.background = element_blank(),
# axis.line.x.bottom = element_line(size = .3, color = "black"),
axis.ticks.x = element_blank())
# Calculating accuracy mean per light direction and hemisphere
accu_resp_n_hem <- accu_resp_north %>%
filter(ds_owner == "j" | ds_owner == "g") %>%
group_by(light_dir) %>%
summarise(north = mean(mean))
accu_resp_s_hem <- accu_resp_north %>%
filter(ds_owner == "v" | ds_owner == "a") %>%
group_by(light_dir) %>%
summarise(south = mean(mean))
accu_resp_hem <- left_join(accu_resp_n_hem, accu_resp_s_hem, by = "light_dir")
accu_resp_hem_long <- accu_resp_hem %>% pivot_longer(-light_dir, names_to = "hemisphere", values_to = "mean")
p <- ggplot(accu_resp_hem_long, aes(x = light_dir, y = mean, fill = hemisphere))
p + geom_bar(stat = "identity", position = "dodge2", alpha = .9) +
scale_fill_brewer(type = "qual", palette = "Dark2") +
scale_y_continuous(labels = scales::label_percent(scale = 1),
expand = expansion(mult = c(0, 0.05)),
limits = c(0, 100)) +
geom_text(aes(y = mean, label = round(mean, digits = 1)), position = position_dodge2(width = 1), vjust = -0.40, size = rel(3), family = dviz_font_family) +
labs(x = NULL, y = "Mean",
fill = "Hemisphere",
title = "Mean accuracy per hemisphere (NW)") +
theme_dviz_hgrid() +
theme(legend.position = "top",
axis.line.x.bottom = element_line(size = .5, color = "black"),
axis.ticks.x = element_blank())
# Calculating accuracy per participant and handedness
accu_hand_l <- df_long_clean %>%
filter(accuracy == "yes",
handedness == "l") %>%
group_by(ds_owner, id, handedness) %>%
mutate(accu_count = n(),
accu_pct = round(accu_count / 40 * 100, 1)) %>%
ungroup() %>%
select(ds_owner, id, handedness, accu_count, accu_pct)
accu_hand_r <- df_long_clean %>%
filter(accuracy == "yes",
handedness == "r") %>%
group_by(ds_owner, id, handedness) %>%
mutate(accu_count = n(),
accu_pct = round(accu_count / 40 * 100, 1)) %>%
ungroup() %>%
select(ds_owner, id, handedness, accu_count, accu_pct)
accu_hand_b <- df_long_clean %>%
filter(accuracy == "yes",
handedness == "b") %>%
group_by(ds_owner, id, handedness) %>%
mutate(accu_count = n(),
accu_pct = round(accu_count / 40 * 100, 1)) %>%
ungroup() %>%
select(ds_owner, id, handedness, accu_count, accu_pct)
# Calculating accuracy per handedness and respond
accu_resp_hand_l <- df_long_clean %>%
filter(accuracy == "yes",
handedness == "l" | handedness == "b") %>%
group_by(landform, land_dir, light_dir) %>%
summarise(accu_count = n()) %>%
mutate(accu_left = accu_count / 34 * 100) %>%
ungroup() %>%
select(landform,land_dir, light_dir, accu_left)
accu_resp_hand_r <- df_long_clean %>%
filter(accuracy == "yes",
handedness == "r") %>%
group_by(landform, land_dir, light_dir) %>%
summarise(accu_count = n()) %>%
mutate(accu_right = accu_count / 156 * 100) %>%
ungroup() %>%
select(landform, land_dir, light_dir, accu_right)
accu_resp_hand <-  accu_resp_hand_l %>% left_join(accu_resp_hand_r)
# Calculating accuracy per handedness and respond (northern light direction)
accu_hand_l_north<- accu_resp_hand %>%
group_by(light_dir) %>%
summarise(left = mean(accu_left))
accu_hand_r_north<- accu_resp_hand %>%
group_by(light_dir) %>%
summarise(right = mean(accu_right))
accu_hand_north <- accu_hand_l_north %>% left_join(accu_hand_r_north)
accu_hand_north_long <- accu_hand_north %>% pivot_longer(-light_dir, names_to = "handedness", values_to = "mean")
accu_hand_north_long <- within(accu_hand_north_long, light_dir <- factor(light_dir, levels = c(0, 337.5, 315, 292.5, 270)))
p <- ggplot(accu_hand_north_long, aes(x = light_dir, y = mean, fill = handedness))
p + geom_bar(stat = "identity", position = "dodge2", alpha =.9) +
scale_fill_brewer(type = "qual", palette = "Dark2") +
scale_y_continuous(labels = scales::label_percent(scale = 1),
expand = expansion(mult = c(0, 0.05)),
limits = c(0, 100)) +
geom_text(aes(y = mean, label = round(mean, digits = 1)), position = position_dodge2(width = 1), vjust = -0.40, size = rel(3), family = dviz_font_family) +
labs(x = NULL, y = "Mean",
fill = "Handedness",
title = "Mean accuracy per handedness (NW)") +
theme_dviz_hgrid() +
theme(legend.position = "top",
axis.line.x.bottom = element_line(size = .5, color = "black"),
axis.ticks.x = element_blank())
# Calculating accuracy per gender and respond
accu_gender_m <- df_long_clean %>%
filter(accuracy == "yes",
gender == "m") %>%
group_by(landform, land_dir, light_dir) %>%
summarise(accu_count = n()) %>%
mutate(male_pct = accu_count / 104 * 100) %>%
select(landform, land_dir, light_dir, male_pct)
accu_gender_f <- df_long %>%
filter(accuracy == "yes",
gender == "f") %>%
group_by(landform, land_dir, light_dir) %>%
summarise(accu_count = n()) %>%
mutate(female_pct = accu_count / 86 * 100) %>%
select(landform, land_dir, light_dir, female_pct)
accu_gender <- accu_gender_m %>% left_join(accu_gender_f)
# Calculating accuracy per gender and respond (northern light direction)
accu_gender_north_m <- accu_gender %>%
group_by(light_dir) %>%
summarise(male = mean(male_pct))
accu_gender_north_f <- accu_gender %>%
group_by(light_dir) %>%
summarise(female = mean(female_pct))
accu_gender_north <- accu_gender_north_m %>% left_join(accu_gender_north_f)
accu_gender_north_long <- accu_gender_north %>% pivot_longer(-light_dir, names_to = "gender", values_to = "mean")
accu_gender_north_long <- within(accu_gender_north_long, light_dir <- factor(light_dir, levels = c(0, 337.5, 315, 292.5, 270)))
p <- ggplot(accu_gender_north_long, aes(x = light_dir, y = mean, fill = gender))
p + geom_bar(stat = "identity", position = "dodge2", alpha = .9) +
scale_fill_brewer(type = "qual", palette = "Dark2") +
scale_y_continuous(labels = scales::label_percent(scale = 1),
expand = expansion(mult = c(0, 0.05)),
limits = c(0, 100)) +
geom_text(aes(y = mean, label = round(mean, digits = 1)), position = position_dodge2(width = 1), vjust = -0.40, size = rel(3), family = dviz_font_family) +
labs(x = NULL, y = "Mean",
fill = "Gender",
title = "Mean accuracy per gender (NW)") +
theme_dviz_hgrid() +
theme(legend.position = "top",
axis.line.x.bottom = element_line(size = .5, color = "black"),
axis.ticks.x = element_blank())
# Calculating accuracy per expertise and respond
accu_exp_some <- df_long_clean %>%
filter(accuracy == "yes",
expertise == "some_experience") %>%
group_by(landform, land_dir, light_dir) %>%
summarise(accu_count = n()) %>%
mutate(some_pct = accu_count / 40 * 100) %>%
select(landform, land_dir, light_dir, some_pct)
accu_exp_no <- df_long_clean %>%
filter(accuracy == "yes",
expertise == "no_experience") %>%
group_by(landform, land_dir, light_dir) %>%
summarise(accu_count = n()) %>%
mutate(no_pct = accu_count / 150 * 100) %>%
select(landform, land_dir, light_dir, no_pct)
accu_exp <- accu_exp_some %>% left_join(accu_exp_no)
# Calculating accuracy per expertise and respond (northern light direction)
accu_exp_some_north <- accu_exp %>%
group_by(light_dir) %>%
summarise(some = mean(some_pct))
accu_exp_no_north <- accu_exp %>%
group_by(light_dir) %>%
summarise(no = mean(no_pct))
accu_exp_north <- accu_exp_some_north %>% left_join(accu_exp_no_north)
accu_exp_north_long <- accu_exp_north %>% pivot_longer(-light_dir, names_to = "expertise", values_to = "mean")
accu_exp_north_long <- within(accu_exp_north_long, light_dir <- factor(light_dir, levels = c(0, 337.5, 315, 292.5, 270)))
p <- ggplot(accu_exp_north_long, aes(x = light_dir, y = mean, fill = expertise))
p + geom_bar(stat = "identity", position = "dodge2", alpha = .9) +
scale_fill_brewer(type = "qual", palette = "Dark2") +
scale_y_continuous(labels = scales::label_percent(scale = 1),
expand = expansion(mult = c(0, 0.05)),
limits = c(0, 100)) +
geom_text(aes(y = mean, label = round(mean, digits = 1)), position = position_dodge2(width = 1), vjust = -0.40, size = rel(3), family = dviz_font_family) +
labs(x = NULL, y = "Mean",
fill = "Expertise",
title = "Mean accuracy per expertise (NW)") +
theme_dviz_hgrid() +
theme(legend.position = "top",
axis.line.x.bottom = element_line(size = .5, color = "black"),
axis.ticks.x = element_blank())
# Expertise vs handedness
accu_exp_hand <-  left_join(accu_hand_north_long %>%
rename(mean_hand = mean),
accu_exp_north_long %>%
rename(mean_exp = mean),
by = "light_dir") %>%
mutate(mean = (mean_hand + mean_exp) / 2) %>%
select(-c(mean_hand, mean_exp))
accu_exp_hand <- within(accu_exp_hand, light_dir <- factor(light_dir, levels = c(0, 337.5, 315, 292.5, 270)))
accu_exp_hand <- within(accu_exp_hand, expertise <- factor(expertise, levels = c("some", "no")))
p <- ggplot(accu_exp_hand, aes(x = light_dir, y = mean, fill = handedness))
p + geom_bar(stat = "identity", position = "dodge2", alpha = .9) +
scale_fill_brewer(type = "qual", palette = "Dark2") +
scale_y_continuous(labels = scales::label_percent(scale = 1),
expand = expansion(mult = c(0, 0.05)),
limits = c(0, 100)) +
geom_text(aes(y = mean, label = round(mean, digits = 1)), position = position_dodge2(width = 1), vjust = -0.40, size = rel(3), family = dviz_font_family) +
labs(x = NULL, y = "Mean",
fill = "Handedness",
title = "Mean accuracy per expertise \nand handedness (NW)") +
theme_dviz_hgrid() +
theme(legend.position = "top",
axis.line.x.bottom = element_line(size = .5, color = "black"),
axis.ticks.x = element_blank()) +
facet_wrap(~ expertise)
write.csv(accu_exp_north_long, file = "accu_exp_north_long.csv", row.names = F)
write.csv(accu_resp_hem_long, file = "accu_resp_hem_long.csv", row.names = F)
